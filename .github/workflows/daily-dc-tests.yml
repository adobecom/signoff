name: Daily DC Tests

on:
  schedule:
    - cron: '0 7 * * *'
  workflow_dispatch: 

jobs:
  dispatch-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Dispatch Page Load Test
        id: dispatch
        uses: actions/github-script@v7
        with:
          script: |
            const response = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'pageload.yml',
              ref: 'main',
              inputs: {
                testCodeBranch: 'main',
                environment: 'prod',
                workers: '3',
                delay: '0',
                gist_urls: 'dc/pageload/urls.yml'
              }
            })
            
            console.log("Successfully dispatched pageload.yml workflow")
            return Date.now()
      
      - name: Wait for workflow completion
        id: wait
        uses: actions/github-script@v7
        with:
          timeout-minutes: 45
          script: |
            const dispatchTime = ${{ steps.dispatch.outputs.result }}
            const maxWaitTime = 45 * 60 * 1000 // 45 minutes
            const pollInterval = 30 * 1000 // 30 seconds
            
            let workflowRun = null
            let elapsedTime = 0
            
            while (elapsedTime < maxWaitTime) {
              // Get recent workflow runs
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'pageload.yml',
                per_page: 10
              })
              
              // Find the run we just dispatched
              const recentRun = runs.data.workflow_runs.find(run => 
                new Date(run.created_at).getTime() >= dispatchTime &&
                run.event === 'workflow_dispatch'
              )
              
              if (recentRun && recentRun.status === 'completed') {
                workflowRun = recentRun
                break
              }
              
              console.log(`Waiting for workflow to complete... (${Math.round(elapsedTime/1000)}s elapsed)`)
              await new Promise(resolve => setTimeout(resolve, pollInterval))
              elapsedTime += pollInterval
            }
            
            if (!workflowRun) {
              throw new Error('Workflow did not complete within timeout period')
            }
            
            console.log(`Workflow completed with status: ${workflowRun.conclusion}`)
            return {
              id: workflowRun.id,
              conclusion: workflowRun.conclusion,
              html_url: workflowRun.html_url,
              created_at: workflowRun.created_at,
              updated_at: workflowRun.updated_at
            }

      - name: Download workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const workflowResult = ${{ steps.wait.outputs.result }}
            const fs = require('fs')
            
            // Get artifacts from the completed workflow
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowResult.id
            })
            
            if (artifacts.data.artifacts.length === 0) {
              console.log('No artifacts found')
              return
            }
            
            // Download screenshots artifact if it exists
            const screenshotArtifact = artifacts.data.artifacts.find(a => a.name === 'screenshots')
            if (screenshotArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: screenshotArtifact.id,
                archive_format: 'zip'
              })
              
              fs.writeFileSync('screenshots.zip', Buffer.from(download.data))
              console.log('Downloaded screenshots artifact')
            }

      - name: Extract artifacts and analyze results
        run: |
          if [ -f screenshots.zip ]; then
            unzip -q screenshots.zip -d extracted_screenshots/ || true
            echo "Extracted screenshots"
            ls -la extracted_screenshots/ || true
          fi

      - name: Get workflow logs and create summary
        id: summary
        uses: actions/github-script@v7
        with:
          script: |
            const workflowResult = ${{ steps.wait.outputs.result }}
            const fs = require('fs')
            
            // Get workflow run jobs
            const jobs = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: workflowResult.id
            })
            
            let testResults = {
              status: workflowResult.conclusion,
              startTime: workflowResult.created_at,
              endTime: workflowResult.updated_at,
              duration: Math.round((new Date(workflowResult.updated_at) - new Date(workflowResult.created_at)) / 1000 / 60),
              workflowUrl: workflowResult.html_url,
              jobs: [],
              screenshots: [],
              errors: []
            }
            
            // Analyze job results
            for (const job of jobs.data.jobs) {
              testResults.jobs.push({
                name: job.name,
                status: job.conclusion,
                duration: Math.round((new Date(job.completed_at) - new Date(job.started_at)) / 1000 / 60)
              })
              
              // Get job logs to extract test details
              try {
                const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  job_id: job.id
                })
                
                const logText = logs.data
                
                // Extract error information from logs
                const errorLines = logText.split('\n').filter(line => 
                  line.includes('404') || 
                  line.includes('999') || 
                  line.includes('Error:') ||
                  line.includes('Failed')
                )
                
                testResults.errors.push(...errorLines.slice(0, 20)) // Limit to first 20 errors
                
              } catch (error) {
                console.log(`Could not retrieve logs for job ${job.id}`)
              }
            }
            
            // Check for screenshots
            if (fs.existsSync('extracted_screenshots')) {
              const screenshots = fs.readdirSync('extracted_screenshots').filter(f => f.endsWith('.png'))
              testResults.screenshots = screenshots.slice(0, 10) // Limit to first 10 screenshots
            }
            
            return testResults

      - name: Update Wiki
        uses: actions/github-script@v7
        with:
          script: |
            const testResults = ${{ steps.summary.outputs.result }}
            const today = new Date().toISOString().split('T')[0]
            
            // Format the wiki content
            const statusEmoji = testResults.status === 'success' ? '✅' : '❌'
            const screenshotList = testResults.screenshots.length > 0 ? 
              `${testResults.screenshots.length} screenshots captured:\n${testResults.screenshots.map(s => `- ${s}`).join('\n')}` : 
              'No screenshots available'
            const errorSection = testResults.errors.length > 0 ? 
              `\`\`\`\n${testResults.errors.slice(0, 15).join('\n')}\n\`\`\`` : 
              'No errors detected ✅'
            const jobResults = testResults.jobs.map(job => {
              const jobEmoji = job.status === 'success' ? '✅' : '❌'
              return `- **${job.name}**: ${job.status.toUpperCase()} ${jobEmoji} (${job.duration}m)`
            }).join('\n')
            
            const wikiContent = [
              `# Daily DC Test Results - ${today}`,
              '',
              '## Test Summary',
              `- **Status**: ${testResults.status.toUpperCase()} ${statusEmoji}`,
              `- **Start Time**: ${new Date(testResults.startTime).toLocaleString()}`,
              `- **Duration**: ${testResults.duration} minutes`,
              `- **Workflow**: [View Details](${testResults.workflowUrl})`,
              '',
              '## Job Results',
              jobResults,
              '',
              '## Screenshots Generated', 
              screenshotList,
              '',
              '## Errors/Issues',
              errorSection,
              '',
              '---',
              `*Last updated: ${new Date().toISOString()}*`,
              '*Generated by Daily DC Tests workflow*'
            ].join('\n')
            
            try {
              // Create or update wiki page by creating a commit to the wiki repository
              const wikiRepo = `${context.repo.repo}.wiki`
              const fileName = `Daily-DC-Test-Results-${today}.md`
              
              // Try to get existing file
              let existingFile = null
              try {
                existingFile = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: fileName
                })
              } catch (error) {
                console.log('Wiki page does not exist, will create new one')
              }
              
              // Create or update the wiki page
              const commitMessage = `Update daily test results for ${today}`
              const contentBase64 = Buffer.from(wikiContent).toString('base64')
              
              if (existingFile) {
                // Update existing file
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: fileName,
                  message: commitMessage,
                  content: contentBase64,
                  sha: existingFile.data.sha
                })
                console.log(`Updated wiki page: ${fileName}`)
              } else {
                // Create new file
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: fileName,
                  message: commitMessage,
                  content: contentBase64
                })
                console.log(`Created new wiki page: ${fileName}`)
              }
              
              // Also update the main daily results page
              const mainFileName = 'Daily-DC-Test-Results.md'
              const mainContent = [
                '# Daily Test Results',
                '',
                'This page contains the latest daily test results for the DC tests.',
                '',
                `## Latest Results (${today})`,
                '',
                wikiContent.split('\n').slice(1).join('\n'), // Remove the title since we have our own
                '',
                '## Previous Results',
                '',
                `- [${today}](Daily-DC-Test-Results-${today})`
              ].join('\n')
              
              try {
                const existingMain = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: mainFileName
                })
                
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: mainFileName,
                  message: `Update main daily results page for ${today}`,
                  content: Buffer.from(mainContent).toString('base64'),
                  sha: existingMain.data.sha
                })
              } catch (error) {
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: wikiRepo,
                  path: mainFileName,
                  message: `Create main daily results page for ${today}`,
                  content: Buffer.from(mainContent).toString('base64')
                })
              }
              
              console.log(`Wiki updated successfully. View at: https://github.com/${context.repo.owner}/${context.repo.repo}/wiki`)
              
            } catch (error) {
              console.log('Could not access wiki, creating issue with results instead')
              console.log('Error:', error.message)
              
              // Fallback: Create issue with results
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Daily Test Results - ${today}`,
                body: wikiContent,
                labels: ['test-results', 'daily-report']
              })
              
              console.log(`Created issue with test results: ${issue.data.html_url}`)
            }

      - name: Clean up
        run: |
          rm -f screenshots.zip
          rm -rf extracted_screenshots/ 